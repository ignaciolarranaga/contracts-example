type Job implements Audited @aws_cognito_user_pools {
  id: ID!
  clientId: ID! # Client requesting the job
  contractorId: ID # Once assigned the contractorId will be filled
  contractId: ID # Once assigned to a contract will be filled
  description: String!
  price: Float!
  paid: Boolean!
  paymentDate: AWSDateTime

  createdAt: AWSDateTime!
  lastModifiedAt: AWSDateTime!
  createdBy: String!
  lastModifiedBy: String!
}

## Inputs / Outputs

input CreateJobInput {
  description: String!
  price: Float!
}

input ListJobsFilterInput {
  paid: Boolean
}

input BestClientsInput {
  from: AWSDateTime
  to: AWSDateTime
}

type BestClientsOutput {
  id: ID!
  fullName: String!
  paid: Float!
}

## Connections

type JobConnection @aws_cognito_user_pools {
  items: [Job!]
  nextToken: String
}

type BestClientsOutputConnection {
  items: [BestClientsOutput!]
  nextToken: String
}

## Queries

extend type Query {
  listJobs(filter: ListJobsFilterInput, limit: Int, nextToken: String): JobConnection @aws_cognito_user_pools

  bestClients(input: BestClientsInput, limit: Int, nextToken: String): BestClientsOutputConnection
}

## Mutations

type Mutation {
  createJob(input: CreateJobInput!): Job @aws_cognito_user_pools

  payJob(id: ID!): Job @aws_cognito_user_pools
}